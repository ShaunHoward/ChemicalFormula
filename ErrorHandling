Project 10 - Chemistry - EECS 293
Error Handling Architecture
Shaun Howard

When the user enters a string, the program takes that string
and tries to validate the context. Context validation considers
the following things:
Empty String (just whitespace)
Multiple lines (invalid formula)
Spaces in string (invalid formula)
Matched Parenthesis (necessary for valid formula)

The validator acts as a barricade for the program. It is called
to after the user enters the string. This barricade protects the
other methods of the ChemicalFormula class from bad input data.

In the ChemicalFormula class, local and global error handling is used.
Global error handling is used for validating and checking grouping of
parentheses, including group multipliers. Local error handling is used
when matching the formulas to the formula regular expression, i.e.
in the analyzeFormulaSoundness() method.

The FormulaValidator class uses an error list to track errors globally.
When an error is found in the context, it is added to the list.
The singular validation method, however, calls the rest of the methods 
in the validator so the validation process is sequential.
Thus, the errors are contained in the validator class but propagate
through that class until validation is finished.
At the end of validation, the amount of errors are checked. 
If there are no errors, the validator returns a good response to
keep going on the formula. If there are errors, the validator returns
a response to stop and print "F".

The program has focuses in correctness and robustness. It is correct
to the extent in which an in/out error does not occur. It is robust in
almost always providing a "T" or "F" answer to the user no matter the input.
The program does not use exceptions except for in/out errors, which are caught
and the user is notified of the error.

Try-with-resources is used for reading the standard in in an effort to minimize
code and successfully close resources after use or only use the buffered input
while there are resources. This handles the stream closing aspect of the program.

Assertions are used in places to test pre-conditions and post-conditions.
They test for things that should never be true. They test things like null
and emptiness or string values that should only be "T" or "F". These asserts
are used in places where it matters and are not over-used.


